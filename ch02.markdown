---
layout: book
title: "A Tour of the Dart Language"
subsite: "Dart Up and Running"
description: "Read Chapter 2, A Tour of the Dart Language of Dart (from Dart: Up and Running, published by O'Reilly)."
prev-chapter: ch01.html
prev-chapter-title: "Quick Start"
next-chapter: ch03.html
next-chapter-title: "Library Tour"
---

{% include toc.html %}
{% include book-nav.html %}

# {{ page.title }}

This chapter shows you how to use each major Dart feature, from
variables and operators to classes and libraries, with the assumption
that you already know how to program in another language.

<aside class="alert alert-info" markdown="1">
**Note:**
To play with each feature, create a command-line application project
in Dart Editor, as described in
[Up and running](ch01.html#up-and-running).
</aside>

Consult the [Dart Language
Specification](/docs/spec/) whenever you want
more details about a language feature.


## Un programme Dart simple {#a-basic-dart-program}

Le programme suivant utilise quelques unes des fonctionnalités de base de Dart :

<!-- ch02/basic_dart_program.dart -->
{% prettify dart %}
// Définition d'une fonction.
afficheNombre(num unNombre) {
  print('Le nombre est $unNombre.'); // Affiche dans la console
}

// C’est ici que l’application commence son exécution.
main() {
  var nombre = 42; // Déclare et initialise une variable.
  afficheNombre(nombre); // Appel d'une fonction.
}
{% endprettify %}

Voici ce qu’utilise ce programme et qu’utilisent toutes (ou presque toutes) les applications Dart :

<code>// <em>Ceci est un commentaire.</em> </code>

:   Utilisez // pour indiquer que le reste de la ligne est un commentaire.
    Vous pouvez également utiliser /\* ... \*/. Pour plus de détails, voir
    [Commentaires](#comments).

`num`

:   Un type. Quelques un des autres types natifs sont String, int, and bool.

`42`

:   Un nombre littéral. Les littéraux sont une sorte de constante à la compilation.

`print()`

:   Un moyen pratique d’afficher dans la sortie.

`'...'` (or `"..."`)

:   Une chaine de caratère.

<code>$<em>nomDeVariable</em></code> (ou <code>${<em>expression</em>}</code>)

:   L’interpolation: permet l'évaluation de variables ou d'expressions à l'intérieur d'une chaîne de caractères littérale.
    Pour plus d’informations, Voir
    [Strings](#strings).

`main()`

:   La fonction spéciale, nécessaire et de premier niveau où l’application démarre.
    Pour plus d’information, Voir
    [The main() function](#the-main-function).

`var`

:   Une façon de déclarer une variable sans avoir à préciser son type.

<aside class="alert alert-info" markdown="1">
**Note:**
Notre code suite la convention décrite dans le [Dart Style
Guide.](/articles/style-guide/).
Par exemple, nous utilisons une indentation à deux espaces.
</aside>


## Concepts important {#important-concepts}

Pendant que vous apprenez le langage Dart, gardez ces principes et
concepts en mémoire :

-   Tout ce que vous pouvez placer dans une variable est un *objet*,
    et tout objet est une instance d'une *classe*. Y compris les nombres,
    les fonctions et `null` sont des objets. Tous les objets héritent
    de la classe [Object](http://api.dartlang.org/dart_core/Object.html).

-   Le typage statique (comme `num` dans l'exemple précédent) clarifie
    votre intention et permet aux outils de détecter les erreurs de
    types, mais il reste optionnel. (Pendant que vous debuggez votre
    code, vous pourrez remarquer que les variables dont le type n'a pas
    été spécifié ont un type spécial : `dynamic`.)

-   Dart analyse tout votre code avant de le lancer. Vous pouvez fournir
    des indications à Dart, par exemple, en précisant les types ou les
    constantes de compilation, pour détecter les erreurs ou encore pour
    accélérer l'exécution de votre code.

-   Dart supporte les fonctions de premier niveau (tel que `main()`),
    tout comme elles peuvent être attachées à une classe ou un objet
    (respectivement, *fonctions statiques* et *méthodes d'instance*).
    Vous pouvez aussi créer des fonctions à l'intérieur d'une fonction
    (*fonctions imbriquées* ou *fonctions internes*).

-   De la même façon, Dart supporte les *variables* de premier niveau,
    tout comme elles peuvent être attachées à une classe ou un objet
    (variables statiques et variables d'instance). Les variables
    d'instance sont aussi nommées champs ou propriétés.

-   Contrairement à Java, Dart n'a pas les mots-clés `public`,
    `protected` et `private`. Si un identifiant commence avec un
    souligner (\_), il est privé à sa librairie. Pour plus de détails,
    voir [Librairies et visibilité](#libraries-and-visibility).

-   Les *identifiants* peuvent commencer par une lettre ou \_, suivi de
    n'importe quelle combinaison de ces caractères ou chiffres.

-   Il est parfois important de distinguer *expression* et
    *instruction*, nous allons préciser la différence entre ces deux
    mots.

-   Les outils Dart peuvent rapporter deux types de problèmes : des
    alertes et des erreurs. Les alertes indiquent juste que votre code
    peut ne pas fonctionner, mais n'empêche pas l'exécution de votre
    programme. Une erreur de compilation empêche totalement l'exécution
    de votre programme; une erreur à l'exécution résulte d'une
    [exception](#exceptions) qui est remontée lorsque le code s'exécute.

<ul>
  <li id="runtime-modes" class="no_toc" markdown="1">
  Dart a deux <em id="runtime-modes">modes d'exécution</em> :
  production et checked. Nous recommandons de développer et debugger
  en mode checked, et déployer en mode production.

  *Le mode production* est le mode d'exécution par défaut d'un
  programme Dart, optimisé pour la vitesse. Le mode production ignore
  les [instructions d'assertion](#assert) et le typage statique.

  *Le mode checked* est un mode pour les développeurs, qui aide à
  détecter certaines erreurs de type à l'exécution. Par exemple, si on
  affecte une chaîne de caractères à une variable déclarée comme `num`,
  alors le mode checked lance une exception.
  </li>
</ul>

## Mots clés {#keywords}

Le tableau suivant liste les mots clés que le langage Dart traite spécialement.

{% assign bii = '&nbsp;<sup title="built-in-identifier" alt="built-in-identifier">1</sup>' %}
{% assign lrw = '&nbsp;<sup title="limited reserved word" alt="limited reserved word">2</sup>' %}

| abstract{{bii}}   | continue          | false             | new               | this              |
| as{{bii}}         | default           | final             | null              | throw             |
| assert            | deferred{{bii}}   | finally           | operator{{bii}}   | true              |
| async{{lrw}}      | do                | for               | part{{bii}}       | try               |
| async*{{lrw}}     | dynamic{{bii}}    | get{{bii}}        | rethrow           | typedef{{bii}}    |
| await{{lrw}}      | else              | if                | return            | var               |
| break             | enum              | implements{{bii}} | set{{bii}}        | void              |
| case              | export{{bii}}     | import{{bii}}     | static{{bii}}     | while             |
| catch             | external{{bii}}   | in                | super             | with              |
| class             | extends           | is                | switch            | yield{{lrw}}      |
| const             | factory{{bii}}    | library{{bii}}    | sync*{{lrw}}      | yield*{{lrw}}     |
{:.table .table-striped .nowrap}

<sup>1</sup>  Les mots annotés **1** sont des *identifiants primitifs*.
Evitez d’utiliser les identifants inclus en tant qu’identifiant,
et ne les utilisez jamais en nom de classe ou de type.
Les identifiants inclus existent pour faciliter le portage de JavaScript à Dart.
Par exemple, si du code JavaScript a une variable nommée `factory`,
il n’est pas nécessaire de la renommer lorsque vous portez le code en Dart.

<sup>2</sup> Les mots annotés **2** sont nouveaux,
ces mots réservés sont liés au support de l’asynchronisme
qui a été ajouté après la  sortie de la version 1.0 de Dart.
Vous ne pouvez pas utiliser async, await, ou yield en tant
qu’identifiant dans le corps d’une fonction marquée avec `async`, `async*`, or `sync*`.
Pour plus d’information, voir
[Dart Language Asynchrony Support: Phase 1](/articles/await-async/)
and the [Dart Language Specification](/docs/spec/).

Tous les autres mots de ce tableau sont des <em>mots réservés</em>.
Vous ne pouvez pas utiliser les mots réservés en tant qu’identifiant.


## Variables {#variables}

Here’s an example of creating a variable and assigning a value to it:

<!-- ch02/creating_a_variable.dart -->
{% prettify dart %}
var name = 'Bob';
{% endprettify %}

Variables are references. The variable called `name` contains a
reference to a String object with a value of “Bob”.


### Default value {#default-value}
{:.no_toc}

Uninitialized variables have an initial value of `null`. Even variables
with numeric types are initially null, because numbers are objects.

<!-- ch02/numbers_are_objects.dart -->
{% prettify dart %}
int lineCount;
assert(lineCount == null);
// Variables (even if they will be numbers) are initially null.
{% endprettify %}

<aside class="alert alert-info" markdown="1">
**Note:**
The `assert()` call is ignored in production mode. In checked mode,
<code>assert(<em>condition</em>)</code>
throws an exception unless *condition* is true. For details,
see the [Assert](#assert) section.
</aside>


### Optional types {#optional-types}
{:.no_toc}

You have the option of adding static types to your variable
declarations:

<!-- ch02/static_types.dart -->
{% prettify dart %}
String name = 'Bob';
{% endprettify %}

Adding types is a way to clearly express your intent. Tools such as
compilers and editors can use these types to help you, by providing code
completion and early warnings for bugs and code completion.

<aside class="alert alert-info" markdown="1">
**Note:**
This chapter follows the [style guide
recommendation](/articles/style-guide/#type-annotations)
of using `var`, rather than type annotations, for local variables.
</aside>


### Final and const {#final-and-const}
{:.no_toc}

If you never intend to change a variable, use `final` or `const`, either
instead of `var` or in addition to a type. A final variable can be set
only once; a const variable is a compile-time constant.

A top-level or class variable that’s declared as `final` is initialized
the first time it’s used:

<!-- ch02/final_initialization.dart -->
{% prettify dart %}
final name = 'Bob';   // Or: final String name = 'Bob';
// name = 'Alice';    // Uncommenting this results in an error
{% endprettify %}

<aside class="alert alert-info" markdown="1">
**Note:**
Lazy initialization of final variables helps apps start up faster.
</aside>

Use `const` for variables that you want to be compile-time constants. If
the const variable is at the class level, mark it `static const`.
(Instance variables can’t be const.) Where you declare the variable, set
the value to a compile-time constant such as a literal, a const
variable, or the result of an arithmetic operation on constant numbers:

<!-- ch02/const.dart -->
{% prettify dart %}
const bar = 1000000;       // Unit of pressure (in dynes/cm2)
const atm = 1.01325 * bar; // Standard atmosphere
{% endprettify %}


## Built-in types {#built-in-types}

The Dart language has special support for the following types:

-   numbers

-   strings

-   booleans

-   lists (also known as *arrays*)

-   maps

-   symbols

You can initialize an object of any of these special types using a
literal. For example, `'this is a
    string'` is a string literal, and `true` is a boolean literal.

Because every variable in Dart refers to an object—an instance of a
*class*—you can usually use *constructors* to initialize variables. Some
of the built-in types have their own constructors. For example, you can
use the `Map()` constructor to create a map, using code such as
`new Map()`.


### Numbers {#numbers}
{:.no_toc}

Dart numbers come in two flavors:

[`int`](http://api.dartlang.org/dart_core/int.html)

:   Integer values, which generally should be in the range
    -2<sup>53</sup> to 2<sup>53</sup>

[`double`](http://api.dartlang.org/dart_core/double.html)

:   64-bit (double-precision) floating-point numbers, as specified by
    the IEEE 754 standard

Both `int` and `double` are subtypes of
[`num`.](http://api.dartlang.org/dart_core/num.html) The num type
includes basic operators such as +, -, /, and \*, as well as bitwise
operators such as \>\>. The num type is also where you’ll find
`abs()`,` ceil()`, and `floor()`, among other methods. If num and its
subtypes don’t have what you’re looking for, the
[Math](http://api.dartlang.org/dart_math.html) library might.

<aside class="alert alert-warning" markdown="1">
**Warning:**
Integers outside of the
-2<sup>53</sup> to 2<sup>53</sup> range currently behave
differently in JavaScript produced from Dart code than they do when
the same Dart code runs in the Dart VM. The reason is that Dart is
specified to have arbitrary-precision integers, but JavaScript isn't.
See [issue 1533](http://dartbug.com/1533) for details.
</aside>

Integers are numbers without a decimal point. Here are some examples of
defining integer literals:

<!-- ch02/integer_literals.dart -->
{% prettify dart %}
var x = 1;
var hex = 0xDEADBEEF;
var bigInt = 346534658346524376592384765923749587398457294759347029438709349347;
{% endprettify %}

If a number includes a decimal, it is a double. Here are some examples
of defining double literals:

<!-- ch02/double_literals.dart -->
{% prettify dart %}
var y = 1.1;
var exponents = 1.42e5;
{% endprettify %}

Here’s how you turn a string into a number, or vice versa:

<!-- ch02/number_conversion.dart -->
{% prettify dart %}
// String -> int
var one = int.parse('1');
assert(one == 1);

// String -> double
var onePointOne = double.parse('1.1');
assert(onePointOne == 1.1);

// int -> String
String oneAsString = 1.toString();
assert(oneAsString == '1');

// double -> String
String piAsString = 3.14159.toStringAsFixed(2);
assert(piAsString == '3.14');
{% endprettify %}

The int type specifies the traditional bitwise shift (\<\<, \>\>), AND
(&), and OR (|) operators. For example:

<!-- ch02/bit_shifting.dart -->
{% prettify dart %}
assert((3 << 1) == 6);  // 0011 << 1 == 0110
assert((3 >> 1) == 1);  // 0011 >> 1 == 0001
assert((3 | 4)  == 7);  // 0011 | 0100 == 0111
{% endprettify %}


### Strings {#strings}
{:.no_toc}

A Dart string is a sequence of UTF-16 code units. You can use either
single or double quotes to create a string:

<!-- ch02/quoting.dart -->
{% prettify dart %}
var s1 = 'Single quotes work well for string literals.';
var s2 = "Double quotes work just as well.";
var s3 = 'It\'s easy to escape the string delimiter.';
var s4 = "It's even easier to just use the other string delimiter.";
{% endprettify %}

You can put the value of an expression inside a string by using
`${`*`expression`*`}`. If the expression is an identifier, you can skip
the {}. To get the string corresponding to an object, Dart calls the
object’s `toString()` method.

<!-- ch02/string_interpolation.dart -->
{% prettify dart %}
var s = 'string interpolation';

assert('Dart has $s, which is very handy.' ==
       'Dart has string interpolation, which is very handy.');
assert('That deserves all caps. ${s.toUpperCase()} is very handy!' ==
       'That deserves all caps. STRING INTERPOLATION is very handy!');
{% endprettify %}

<aside class="alert alert-info" markdown="1">
**Note:**
The `==` operator tests whether two objects are equivalent. Two
strings are equivalent if they contain the same sequence of code
units.
</aside>

You can concatenate strings using adjacent string literals or the `+`
operator:

<!-- adjacent_string_literals.dart -->
{% prettify dart %}
var s1 = 'String ' 'concatenation'
         " works even over line breaks.";
assert(s1 == 'String concatenation works even over line breaks.');

var s2 = 'The addition operator '
         + 'works, as well.';
assert(s2 == 'The addition operator works, as well.');
{% endprettify %}

Another way to create a multi-line string: use a triple quote with
either single or double quotation marks:

<!-- ch02/triple_quotes.dart -->
{% prettify dart %}
var s1 = '''
You can create
multi-line strings like this one.
''';

var s2 = """This is also a
multi-line string.""";
{% endprettify %}

You can create a “raw” string by prefixing it with `r`:

<!-- ch02/raw_strings.dart -->
{% prettify dart %}
var s = r"In a raw string, even \n isn't special.";
{% endprettify %}

You can use Unicode escapes inside of strings:

<!-- ch02/quoting.dart -->
{% prettify dart %}
print('Unicode escapes work: \u2665'); // Unicode escapes work: [heart]
{% endprettify %}

For more information on using strings, see
[Strings and regular expressions](ch03.html#strings-and-regular-expressions).


### Booleans {#booleans}
{:.no_toc}

To represent boolean values, Dart has a type named `bool`. Only two
objects have type bool: the boolean literals, `true` and `false`.

When Dart expects a boolean value, only the value `true` is treated as
true. All other values are treated as false. Unlike in JavaScript,
values such as `1`, `"aString"`, and `someObject` are all treated as
false.

For example, consider the following code, which is valid both as
JavaScript and as Dart code:

<!-- ch02/strictly_booleans.dart -->
{% prettify dart %}
var name = 'Bob';
if (name) {
  print('You have a name!'); // Prints in JavaScript, not in Dart.
}
{% endprettify %}

If you run this code as JavaScript, it prints “You have a name!” because
`name` is a non-null object. However, in Dart running in *production
mode*, the preceding code doesn’t print at all because `name` is converted to
`false` (because `name
      != true`). In Dart running in *checked mode*, the preceding code
throws an exception because the `name` variable is not a bool.

Here’s another example of code that behaves differently in JavaScript
and Dart:

<!-- ch02/if_one.dart -->
{% prettify dart %}
if (1) {
  print('JavaScript prints this line because it thinks 1 is true.');
} else {
  print('Dart in production mode prints this line.');
  // However, in checked mode, if (1) throws an exception.
}
{% endprettify %}

<aside class="alert alert-info" markdown="1">
**Note:**
The previous two samples work only in production mode, not checked
mode. In checked mode, an exception is thrown if a non-boolean is used
when a boolean value is expected.
</aside>

Dart’s treatment of booleans is designed to avoid the strange behaviors
that can arise when many values can be treated as true. What this means
for you is that, instead of using code like
<code>if (<em>nonbooleanValue</em>)</code>, you should instead
explicitly check for values. For example:

<!-- ch02/empty_string.dart -->
{% prettify dart %}
// Check for an empty string.
var fullName = '';
assert(fullName.isEmpty);

// Check for zero.
var hitPoints = 0;
assert(hitPoints <= 0);

// Check for null.
var unicorn;
assert(unicorn == null);

// Check for NaN.
var iMeantToDoThis = 0 / 0;
assert(iMeantToDoThis.isNaN);
{% endprettify %}


### Lists {#lists}
{:.no_toc}

Perhaps the most common collection in nearly every programming language
is the *array*, or ordered group of objects. In Dart, arrays are
[List](http://api.dartlang.org/dart_core/List.html) objects, so we
usually just call them *lists*.

Dart list literals look like JavaScript array literals. Here’s a simple
Dart list:

<!-- ch02/list_literal.dart -->
{% prettify dart %}
var list = [1, 2, 3];
{% endprettify %}

Lists use zero-based indexing, where 0 is the index of the first element
and `list.length - 1` is the index of the last element. You can get a
list’s length and refer to list elements just as you would in
JavaScript:

<!-- ch02/list_indexing.dart -->
{% prettify dart %}
var list = [1, 2, 3];
assert(list.length == 3);
assert(list[1] == 2);
{% endprettify %}

The List type has many handy methods for manipulating lists. For more
information about lists, see [Generics](#generics) and
[Collections](ch03.html#collections).


### Maps {#maps}
{:.no_toc}

In general, a map is an object that associates keys and values. Both
keys and values can be any type of object. Each *key* occurs only once,
but you can use the same *value* multiple times. Dart support for maps
is provided by map literals and the
[Map](http://api.dartlang.org/dart_core/Map.html) type.

Here are a couple of simple Dart maps, created using map literals:

<!-- ch02/map_literal.dart -->
{% prettify dart %}
var gifts = {
// Keys      Values
  'first' : 'partridge',
  'second': 'turtledoves',
  'fifth' : 'golden rings'
};

var nobleGases = {
// Keys  Values
  2 :   'helium',
  10:   'neon',
  18:   'argon',
};
{% endprettify %}

You can create the same objects using a Map constructor:

<!-- ch02/map_constructor.dart -->
{% prettify dart %}
var gifts = new Map();
gifts['first'] = 'partridge';
gifts['second'] = 'turtledoves';
gifts['fifth'] = 'golden rings';

var nobleGases = new Map();
nobleGases[2] = 'helium';
nobleGases[10] = 'neon';
nobleGases[18] = 'argon';
{% endprettify %}

Add a new key-value pair to an existing map just as you would in
JavaScript:

<!-- ch02/map_add_item.dart -->
{% prettify dart %}
var gifts = {'first': 'partridge'};
gifts['fourth'] = 'calling birds'; // Add a key-value pair
{% endprettify %}

Retrieve a value from a map the same way you would in JavaScript:

<!-- ch02/map_retrieve_item.dart -->
{% prettify dart %}
var gifts = {'first': 'partridge'};
assert(gifts['first'] == 'partridge');
{% endprettify %}

If you look for a key that isn’t in a map, you get a null in return:

<!-- ch02/map_missing_key.dart -->
{% prettify dart %}
var gifts = {'first': 'partridge'};
assert(gifts['fifth'] == null);
{% endprettify %}

Use `.length` to get the number of key-value pairs in the map:

<!-- ch02/map_length.dart -->
{% prettify dart %}
var gifts = {'first': 'partridge'};
gifts['fourth'] = 'calling birds';
assert(gifts.length == 2);
{% endprettify %}

For more information about maps, see
[Generics](#generics) and
[Maps](ch03.html#maps).


### Symbols {#symbols}
{:.no_toc}

A [Symbol](http://api.dartlang.org/dart_core/Symbol.html) object
represents an operator or identifier declared in a Dart program. You
might never need to use symbols, but they're invaluable for APIs that
refer to identifiers by name, because minification changes identifier
names but not identifier symbols.

To get the symbol for an identifier, use a symbol literal, which is just
`#` followed by the identifier:

<!-- ch02/symbols.dart -->
{% prettify dart %}
#radix  // The symbol literal for an identifier named 'radix'.
#bar    // The symbol literal for an identifier named 'bar'.
{% endprettify %}

For more information on symbols, see
[dart:mirrors - reflection](ch03.html#dartmirrors---reflection).


## Functions {#functions}

Here’s an example of implementing a function:

<!-- ch02/function_types.dart -->
{% prettify dart %}
void printNumber(num number) {
  print('The number is $number.');
}
{% endprettify %}

Although the style guide recommends specifying the parameter and return
types, you don’t have to:

<!-- ch02/function_omitting_types.dart -->
{% prettify dart %}
printNumber(number) { // Omitting types is OK.
  print('The number is $number.');
}
{% endprettify %}

For functions that contain just one expression, you can use a shorthand
syntax:

<!-- ch02/function_shorthand.dart -->
{% prettify dart %}
printNumber(number) => print('The number is $number.');
{% endprettify %}

The <code>=> <em>expr</em>;</code> syntax is a shorthand for
<code>{ return <em>expr</em>;}</code>. In the `printNumber()` function, the expression is the
call to the top-level `print()` function.

<aside class="alert alert-info" markdown="1">
**Note:**
Only an *expression*—not a *statement*—can appear between the arrow
(=\>) and the semicolon (;). For example, you can’t put an [if
statement](#if-and-else) there, but you can use a [conditional (`?:`)
expression](#other-operators).
</aside>

You can use types with =\>, although the convention is not to do so:

<!-- ch02/function_calling.dart -->
{% prettify dart %}
printNumber(num number) => print('The number is $number.');
{% endprettify %}

Here’s an example of calling a function:

<!-- ch02/function_calling.dart -->
{% prettify dart %}
printNumber(123);
{% endprettify %}

A function can have two types of parameters: required and optional. The
required parameters are listed first, followed by any optional
parameters.


### Optional parameters {#optional-parameters}
{:.no_toc}

Optional parameters can be either positional or named, but not both.

Both kinds of optional parameter can have default values. The default
values must be compile-time constants such as literals. If no default
value is provided, the value is `null`.

#### Optional named parameters {#optional-named-parameters}
{:.no_toc}

When calling a function, you can specify named parameters using
<code><em>paramName</em>: <em>value</em></code>. For example:

<!-- ch02/use_named_parameters.dart -->
{% prettify dart %}
enableFlags(bold: true, hidden: false);
{% endprettify %}

When defining a function, use
<code>{<em>param1</em>, <em>param2</em>, …}</code>
to specify named parameters:

<!-- ch02/specify_named_parameters.dart -->
{% prettify dart %}
/// Sets the [bold] and [hidden] flags to the values you specify.
enableFlags({bool bold, bool hidden}) {
  // ...
}
{% endprettify %}

Use a colon (`:`) to specify default values:

<!-- ch02/specify_default_values.dart -->
{% prettify dart %}
/// Sets the [bold] and [hidden] flags to the values you specify,
/// defaulting to false.
enableFlags({bool bold: false, bool hidden: false}) {
  // ...
}

enableFlags(bold: true); // bold will be true; hidden will be false.
{% endprettify %}

#### Optional positional parameters {#optional-positional-parameters}
{:.no_toc}

Wrapping a set of function parameters in `[]` marks them as optional
positional parameters:

<!-- ch02/optional_positional_parameters.dart -->
{% prettify dart %}
String say(String from, String msg, [String device]) {
  var result = '$from says $msg';
  if (device != null) {
    result = '$result with a $device';
  }
  return result;
}
{% endprettify %}

Here’s an example of calling this function without the optional
parameter:

<!-- ch02/optional_positional_parameters.dart -->
{% prettify dart %}
assert(say('Bob', 'Howdy') == 'Bob says Howdy');
{% endprettify %}

And here’s an example of calling this function with the third parameter:

<!-- ch02/optional_positional_parameters.dart -->
{% prettify dart %}
assert(say('Bob', 'Howdy', 'smoke signal') ==
    'Bob says Howdy with a smoke signal');
{% endprettify %}

Use `=` to specify default values:

<!-- ch02/optional_positional_parameter_default.dart -->
{% prettify dart %}
String say(String from, String msg,
    [String device = 'carrier pigeon', String mood]) {
  var result = '$from says $msg';
  if (device != null) {
    result = '$result with a $device';
  }
  if (mood != null) {
    result = '$result (in a $mood mood)';
  }
  return result;
}

assert(say('Bob', 'Howdy') == 'Bob says Howdy with a carrier pigeon');
{% endprettify %}


### The main() function {#the-main-function}
{:.no_toc}

Every app must have a top-level `main()` function, which serves as the
entrypoint to the app. The `main()` function returns `void` and has an
optional `List<String>` parameter for arguments.

Here's an example of the `main()` function for a web app:

<!-- from Dart Editor's default web app -->
{% prettify dart %}
void main() {
  querySelector("#sample_text_id")
    ..text = "Click me!"
    ..onClick.listen(reverseText);
}
{% endprettify %}

<aside class="alert alert-info" markdown="1">
**Note:**
The `..` operator in the preceding code is a cascade operator, which
allows you to perform multiple operations on the members of a single
object. You'll find out more in [Classes](#classes).
</aside>

Here's an example of the `main()` function for a command-line app that
takes arguments:

<!-- ch02/args.dart -->
{% prettify dart %}
// Run the app like this: dart args.dart 1 test
void main(List<String> arguments) {
  print(arguments);

  assert(arguments.length == 2);
  assert(int.parse(arguments[0]) == 1);
  assert(arguments[1] == 'test');
}
{% endprettify %}

You can use the [args library](https://pub.dartlang.org/packages/args) to
define and parse command-line arguments.


### Functions as first-class objects {#functions-as-first-class-objects}
{:.no_toc}

You can pass a function as a parameter to another function. For example:

<!-- from ch02/function_as_parameter.dart -->
{% prettify dart %}
printElement(element) {
  print(element);
}

var list = [1, 2, 3];
list.forEach(printElement); // Pass printElement as a parameter.
{% endprettify %}

You can also assign a function to a variable, such as:

<!-- from ch02/function_as_variable.dart -->
{% prettify dart %}
var loudify = (msg) => '!!! ${msg.toUpperCase()} !!!';
assert(loudify('hello') == '!!! HELLO !!!');
{% endprettify %}


### Lexical scope {#lexical-scope}
{:.no_toc}

Dart is a lexically scoped language, which means that the scope of
variables is determined statically, simply by the layout of the code.
You can “follow the curly braces outwards” to see if a variable is in
scope.

Here is an example of nested functions with variables at each scope
level:

<!-- ch02/nested_functions.dart -->
{% prettify dart %}
var topLevel = true;

main() {
  var insideMain = true;

  myFunction() {
    var insideFunction = true;

    nestedFunction() {
      var insideNestedFunction = true;

      assert(topLevel);
      assert(insideMain);
      assert(insideFunction);
      assert(insideNestedFunction);
    }
  }
}
{% endprettify %}

Notice how `nestedFunction()` can use variables from every level, all
the way up to the top level.


### Lexical closures {#lexical-closures}
{:.no_toc}

A *closure* is a function object that has access to variables in its
lexical scope, even when the function is used outside of its original
scope.

Functions can close over variables defined in surrounding scopes. In the
following example, `adder()` captures the variable `addBy`. Wherever the
returned function goes, it remembers `addBy`.

<!-- ch02/function_closure.dart -->
{% prettify dart %}
/// Returns a function that adds [addBy] to a number.
Function makeAdder(num addBy) {
  adder(num i) {
    return addBy + i;
  }
  return adder;
}

main() {
  var add2 = makeAdder(2); // Create a function that adds 2.
  var add4 = makeAdder(4); // Create a function that adds 4.

  assert(add2(3) == 5);
  assert(add4(3) == 7);
}
{% endprettify %}


### Testing functions for equality {#testing-functions-for-equality}
{:.no_toc}

Here's an example of testing top-level functions, static methods, and
instance methods for equality:

<!-- ch02/function_equality_2.dart -->
{% prettify dart %}
foo() {}               // A top-level function

class SomeClass {
  static void bar() {} // A static method
  void baz() {}        // An instance method
}

main() {
  var x;

  // Comparing top-level functions.
  x = foo;
  assert(foo == x);

  // Comparing static methods.
  x = A.bar;
  assert(A.bar == x);

  // Comparing instance methods.
  var v = new A(); // Instance #1 of A
  var w = new A(); // Instance #2 of A
  var y = w;
  x = w.baz;

  // These closures refer to the same instance (#2),
  // so they're equal.
  assert(y.baz == x);

  // These closures refer to different instances,
  // so they're unequal.
  assert(v.baz != w.baz);
}
{% endprettify %}


### Return values {#return-values}
{:.no_toc}

All functions return a value. If no return value is specified, the
statement `return null;` is implicitly appended to the function body.


## Opérateurs {#operators}

Les opérateurs définis par Dart sont présentés dans le tableau suivant.
Vous pouvez surcharger certains de ces opérateurs, comme décrit dans
[Surcharge d'opérateurs](#overridable-operators).

|--------------------------+------------------------------------------------|
|Description               | Opérateur                                       |
|--------------------------|------------------------------------------------|
| post-fixé unaire           | <code><em>expr</em>++</code>    <code><em>expr</em>--</code>    `()`    `[]`    `.`             |
| pre-fixé unaire            | <code>-<em>expr</em></code>    <code>!<em>expr</em></code>    <code>~<em>expr</em></code>    <code>++<em>expr</em></code>    <code>--<em>expr</em></code>   |
| multificatif           | `*`    `/`    `%`    `~/`                      |
| additif                 | `+`    `-`                                     |
| décalage                    | `<<`    `>>`                                   |
| ET binaire              | `&`                                            |
| OU exclusif binaire              | `^`                                            |
| OU binaire               | `|`                                            |
| comparateur&nbsp;et&nbsp;test de&nbsp;type | `>=`    `>`    `<=`    `<`    `as`    `is`    `is!`      |
| égalité                 | `==`    `!=`                                   |
| ET logique              | `&&`                                           |
| OU logique               | `||`                                           |
| conditionnel              | <code><em>expr1</em> ? <em>expr2</em> : <em>expr3</em></code>        |
| cascade                  | `..`                                           |
| assignation               | `=`    `*=`    `/=`    `~/=`    `%=`    `+=`    `-=`    `<<=`    `>>=`    `&=`    `^=`    `|=`                 |
{:.table .table-striped}

Quand vous utilisez les opérateurs, vous créez des expressions. Voici quelques exemples d'expressions utilisant des opérateurs :

<!-- TODO: write test for this -->
{% prettify dart %}
a++
a + b
a = b
a == b
a ? b: c
a is T
{% endprettify %}

Dans le précédent tableau des opérateurs, chaque opérateur a une plus haute priorité que les opérateurs des lignes suivantes.

Par exemple, l'opérateur multiplicatif `%` a une priorité plus importante que (et de ce fait s'éxecute avant) l'opérateur `==`, qui a lui même une priorité plus importante que l'opérateur logique ET `&&`.
Cette priorié signifie que les deux lignes de code suivantes s'exécutent de la même façon :

<!-- ch02/precedence.dart -->
{% prettify dart %}
// 1: Les parenthèses améliorent la lisibilité.
if ((n % i == 0) && (d % i == 0))

// 2: Plus difficile à lire mais identique.
if (n % i == 0 && d % i == 0)
{% endprettify %}

<aside class="alert alert-warning" markdown="1">
**Attention:**
Pour les opérateurs qui travaillent sur deux opérandes, c'est l'opérande le plus à gauche qui détermine la version de l'opérateur utilisé. Par exemple, si vous avez un objet Vecteur et un objet Point, `unVecteur + unPoint` utilise l'opérateur + de l'objet Vecteur.
</aside>


### Les opérateurs arithmétiques {#arithmetic-operators}
{:.no_toc}

Dart supporte les opérateurs arithmétiques usuels, comme montré dans le tableau suivant.

|-----------------------------+-------------------------------------------|
| Opérateur                    | Equivalent à                             |
|-----------------------------+-------------------------------------------|
| `+`                         | Addition
| `–`                         | Soustraction
| <code>-<em>expr</em></code> | Moins unaire, aussi connu comme négation (inverse le signe de l'expression)
| `*`                         | Multiplication
| `/`                         | Division
| `~/`                        | Division, retourne un résultat entier
| `%`                         | Donne le reste d'une division entière (modulo)
{:.table .table-striped}

Example:

<!-- ch02/arithmetic_operators.dart -->
{% prettify dart %}
assert(2 + 3 == 5);
assert(2 - 3 == -1);
assert(2 * 3 == 6);
assert(5 / 2 == 2.5);   // Le résultat est un double
assert(5 ~/ 2 == 2);    // Le résultat est un entier
assert(5 % 2 == 1);     // Reste

print('5/2 = ${5~/2} reste ${5%2}'); // 5/2 = 2 reste 1
{% endprettify %}

Dart supporte également les opérateurs de pré et post incrémentation et décrémentation

|-----------------------------+-------------------------------------------|
| Opérateur                    | Équivalent à                                   |
|-----------------------------+-------------------------------------------|
| <code>++<em>var</em></code> | <code><em>var</em> = <em>var</em> + 1</code> (la valeur de l'expression est <code><em>var</em> + 1</code>)
| <code><em>var</em>++</code> | <code><em>var</em> = <em>var</em> + 1</code> (la valeur de l'expression est <code><em>var</em></code>)
| <code>--<em>var</em></code> | <code><em>var</em> = <em>var</em> – 1</code> (la valeur de l'expression est <code><em>var</em> – 1</code>)
| <code><em>var</em>--</code> | <code><em>var</em> = <em>var</em> – 1</code> (la valeur de l'expression est <code><em>var</em></code>)
{:.table .table-striped}

Exemple:

<!-- ch02/op_increment_decrement.dart -->
{% prettify dart %}
var a, b;

a = 0;
b = ++a;        // Incrémente a avant d'attribuer la valeur à b.
assert(a == b); // 1 == 1

a = 0;
b = a++;        // Incrémente a après avoir attribué sa valeur à b.
assert(a != b); // 1 != 0

a = 0;
b = --a;        // Decrémente a avant d'attribuer sa valeur à b.
assert(a == b); // -1 == -1

a = 0;
b = a--;        // Decrémente a après avoir attribué sa valeur à b.
assert(a != b); // -1 != 0
{% endprettify %}


### Opérateurs d'égalité et de comparaison {#equality-and-relational-operators}
{:.no_toc}

Le tableau suivant liste les significations des opérateurs d'égalité et de comparaison.

|-----------+-------------------------------------------|
| Opérateur | Signification                             |
|-----------+-------------------------------------------|
| `==`      |       Egal; voir plus bas
| `!=`      |       Différent
| `>`       |       Plus grand que
| `<`       |       Plus petit que
| `>=`      |       Plus grand ou égal
| `<=`      |       Plus petit ou égal
{:.table .table-striped}

Pour tester si deux objets x et y sont identiques, utilisez l'opérateur `==`. (Dans les rares cas où vous avez besoin de savoir si deux objets sont exactement le même, utilisez la fonction
[identical()](https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/dart-core#id_identical) à la place.) Voici comment fonctionne l'opérateur `==`:

1.  Si *x* ou *y* est nul, renvoie vrai si les deux sont nuls, et faux si seulement l'un d'eux est nul.

2.  Retourne le résultat de l'invocation
    <code><em>x</em>.==(<em>y</em>)</code>. (C'est ça, les opérateurs tels que `==` sont des méthodes invoquées sur leur premier opérande. Vous pouvez surcharger grand nombre de ces opérateurs, y compris `==`, comme vous pouvez le voir dans
    [Surcharge d'opérateurs](#overridable-operators).)

Voilà un exemple d'utilisation de chacun des opérateurs d'égalité et de comparaison :

<!-- ch02/op_equality.dart -->
{% prettify dart %}
assert(2 == 2);
assert(2 != 3);
assert(3 > 2);
assert(2 < 3);
assert(3 >= 3);
assert(2 <= 3);
{% endprettify %}


### Opérateurs de test sur les types {#type-test-operators}
{:.no_toc}

Les opérateurs `as`, `is`, and `is!` sont très utiles pour tester les types durant l'éxecution.

|-----------+-------------------------------------------|
| Opérateur| Signification                             |
|-----------+-------------------------------------------|
| `as`      | Conversion de type
| `is`      | Vrai si l'objet a le même type
| `is!`     | Faux si l'objet n'a pas le même type
{:.table .table-striped}

Le résultat de `obj is T` est vrai si `obj` implémente l'interface précisée par `T`. Par exemple, `obj is Object` est toujours vrai.

Utilisez l'opérateur `as` pour convertir un objet dans un type spécifique. En général, vous devez l'utiliser comme raccourci pour un test `is` sur un objet suivi d'une expression utilisant cet objet. Par exemple, dans le code suivant :

<!-- ch02/op_as.dart -->
{% prettify dart %}
if (emp is Person) { // Vérification de type
  emp.firstName = 'Bob';
}
{% endprettify %}

Vous pouvez simplifier le code en utilisant l'opérateur `as` :

<!-- ch02/op_increment_decrement.dart -->
{% prettify dart %}
(emp as Person).firstName = 'Bob';
{% endprettify %}

<aside class="alert alert-info" markdown="1">
**Note:**
Le code n'est pas équivalent. Si `emp` est nul ou n'est pas une instance de Person, le premier exemple (avec `is`) ne fait rien; le second (avec `as`) lève une exception.
</aside>


### Opérateurs d'assignation {#assignment-operators}
{:.no_toc}

Comme nous l'avons déjà vu, vous pouvez assigner des valeurs en utilisant l'opérateur `=`.
Vous pouvez également utiliser des opérateurs composés tels que `+=`, qui combine une opération
avec une assignation.

| `=`  | `–=` | `/=`  | `%=`  | `>>=` | `^=`
| `+=` | `*=` | `~/=` | `<<=` | `&=`  | `|=`
{:.table}

Voici comment fonctionnent les opérateurs d'assignation :

|-----------+----------------------+------------------------|
|           | Assignation composée | Expression équivalente |
|-----------+----------------------+------------------------|
|**Pour un opérateur <em>op</em>:** | <code>a <em>op</em>= b</code> | <code>a = a <em>op</em> b</code>
|**Exemple:**                     |`a += b`                       | `a = a + b`
{:.table}

L'exemple suivant utilise à la fois une assignation et une assignation composeé :

<!-- ch02/op_assign.dart -->
{% prettify dart %}
var a = 2;           // Assignation utilisant =
a *= 3;              // Assignation et multiplication : a = a * 3
assert(a == 6);
{% endprettify %}


### Opérateurs logiques {#logical-operators}
{:.no_toc}

Vous pouvez inverser ou combiner des expressions booléenes en utilisant des opérateurs
logiques.

|-----------------------------+-------------------------------------------|
| Operateur                   | Signification                             |
|-----------------------------+-------------------------------------------|
| <code>!<em>expr</em></code> | Inverse l'expression qui le suit (change faux en vrai, et vice versa)
| `||`                        | OU logique
| `&&`                        | ET logique
{:.table .table-striped}

Voici un exemple d'utilisation des opérateurs logiques :

<!-- ch02/op_logical.dart -->
{% prettify dart %}
if (!done && (col == 0 || col == 3)) {
  // ...Fait quelque chose...
}
{% endprettify %}


### Opérateurs binaires et de décalage de bits {#bitwise-and-shift-operators}
{:.no_toc}

Vous pouvez manipuler individuellement les bits des nombres en Dart. Généralement,
vous utiliserez ces opérateurs binaires et de décalage de bits avec des entiers.

|-----------------------------+-------------------------------------------|
| Opérateur                    | Signification                                   |
|-----------------------------+-------------------------------------------|
| `&`                         | ET
| `|`                         | OU
| `^`                         | OU Exclusif
| <code>~<em>expr</em></code> | Complément binaire à 1 (les 0 deviennent des 1; les 1 deviennent des 0)
| `<<`                        | Décalage à gauche
| `>>`                        | Décalage à droite
{:.table .table-striped}

Voici un exemple d'utilisation des opérateurs binaires et de décalage :

<!-- ch02/op_bitwise.dart -->
{% prettify dart %}
final value = 0x22;
final bitmask = 0x0f;

assert((value & bitmask)  == 0x02);  // ET
assert((value & ~bitmask) == 0x20);  // ET NON
assert((value | bitmask)  == 0x2f);  // OU
assert((value ^ bitmask)  == 0x2d);  // OU Exclusif
assert((value << 4)       == 0x220); // Décalage à gauche
assert((value >> 4)       == 0x02);  // Décalage à droite
{% endprettify %}


### Autres opérateurs {#other-operators}
{:.no_toc}

Il reste quelques opérateurs, vous en avez déjà vu la plupart dans les
autres exemples.

|-----------+-------------------------------------------|
| Opérateur | Nom              |              Signification                                   |
|-----------+-------------------------------------------|
| `()`     | Applique une fonction | Représente un appel de fonction
| `[]`     | Accède à une liste          | Réfère à la valeur dans la liste à l'index spécifié
| <code><em>expr1</em> ? <em>expr2</em> : <em>expr3</em> | Conditionnel | Si _expr1_ est vraie, exécute _expr2_; sinon, exécute _expr3_
| `.`      | Accède un membre        | Réfère à une propriété d'une expression; exemple: `foo.bar` sélectionne la propriété `bar` de l'expression `foo`
| `..`     | Cascade              | Vous permet d'effectuer plusieurs opérations sur les membres d'un même objet; décrit dans [Classes](#classes)
{:.table .table-striped}


## Control flow statements {#control-flow-statements}

You can control the flow of your Dart code using any of the following:

-   `if` and `else`

-   `for` loops

-   `while` and `do`-`while` loops

-   `break` and `continue`

-   `switch` and `case`

-   `assert`

You can also affect the control flow using `try-catch` and `throw`, as
explained in [Exceptions](#exceptions).


### If and else {#if-and-else}
{:.no_toc}

Dart supports `if` statements with optional `else` statements, as the
next sample shows. Also see conditional expressions (?:), which are
covered in [Other operators](#other-operators).

<!-- ch02/flow_if_else.dart -->
{% prettify dart %}
if (isRaining()) {
  you.bringRainCoat();
} else if (isSnowing()) {
  you.wearJacket();
} else {
  car.putTopDown();
}
{% endprettify %}

Remember, unlike JavaScript, Dart treats all values other than `true` as
`false`. See [Booleans](#booleans) for more information.


### For loops {#for-loops}
{:.no_toc}

You can iterate with the standard `for` loop. For example:

<!-- ch02/flow_for_loops.dart -->
{% prettify dart %}
var message = new StringBuffer("Dart is fun");
for (var i = 0; i < 5; i++) {
  message.write('!');
}
{% endprettify %}

Closures inside of Dart’s `for` loops capture the value of the index,
avoiding a common pitfall found in JavaScript. For example, consider:

<!-- ch02/flow_for_loops.dart -->
{% prettify dart %}
var callbacks = [];
for (var i = 0; i < 2; i++) {
  callbacks.add(() => print(i));
}
callbacks.forEach((c) => c());
{% endprettify %}

The output is `0` and then `1`, as expected. In contrast, the example
would print `2` and then `2` in JavaScript.

If the object that you are iterating over is an Iterable, you can use the
<a href="https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/dart-core.Iterable#id_forEach"><code>forEach()</code> method.</a>
Using `forEach()` is a good option if you don’t need to
know the current iteration counter:

<!-- ch02/flow_for_loops.dart -->
{% prettify dart %}
candidates.forEach((candidate) => candidate.interview());
{% endprettify %}

Iterable classes such as List and Set also support the `for-in` form of
[iteration](ch03.html#iteration):

<!-- ch02/flow_for_loops.dart -->
{% prettify dart %}
var collection = [0, 1, 2];
for (var x in collection) {
  print(x);
}
{% endprettify %}


### While and do-while {#while-and-do-while}
{:.no_toc}

A `while` loop evaluates the condition before the loop:

<!-- ch02/flow_while.dart -->
{% prettify dart %}
while (!isDone()) {
  doSomething();
}
{% endprettify %}

A `do`-`while` loop evaluates the condition *after* the loop:

<!-- ch02/flow_while.dart -->
{% prettify dart %}
do {
  printLine();
} while (!atEndOfPage());
{% endprettify %}


### Break and continue {#break-and-continue}
{:.no_toc}

Use `break` to stop looping:

<!-- ch02/flow_break_continue.dart -->
{% prettify dart %}
while (true) {
  if (shutDownRequested()) break;
  processIncomingRequests();
}
{% endprettify %}

Use `continue` to skip to the next loop iteration:

<!-- ch02/flow_break_continue.dart -->
{% prettify dart %}
for (int i = 0; i < candidates.length; i++) {
  var candidate = candidates[i];
  if (candidate.yearsExperience < 5) {
    continue;
  }
  candidate.interview();
}
{% endprettify %}

You might write that example differently if you’re using a
[Iterable](http://api.dartlang.org/dart_core/Iterable.html) such as a
list or set:

<!-- ch02/flow_break_continue.dart -->
{% prettify dart %}
candidates.where((c) => c.yearsExperience >= 5)
          .forEach((c) => c.interview());
{% endprettify %}


### Switch and case {#switch-and-case}
{:.no_toc}

Switch statements in Dart compare integer, string, or compile-time
constants using `==`. The compared objects must all be instances of the
same class (and not of any of its subtypes), and the class must not
override `==`.

Each non-empty `case` clause ends with a `break` statement, as a rule.
Other valid ways to end a non-empty `case` clause are a `continue`,
`throw`, or `return` statement.

Use a `default` clause to execute code when no `case` clause matches:

<!-- ch02/flow_switch_case.dart -->
{% prettify dart %}
var command = 'OPEN';
switch (command) {
  case 'CLOSED':
    executeClosed();
    break;
  case 'PENDING':
    executePending();
    break;
  case 'APPROVED':
    executeApproved();
    break;
  case 'DENIED':
    executeDenied();
    break;
  case 'OPEN':
    executeOpen();
    break;
  default:
    executeUnknown();
}
{% endprettify %}

The following example omits the `break` statement in the `case` clause,
thus generating an error:

<!-- ch02/flow_switch_case.dart -->
{% prettify dart %}
var command = 'OPEN';
switch (command) {
  case 'OPEN':
    executeOpen();
    // ERROR: Missing break causes an exception to be thrown!!

  case 'CLOSED':
    executeClosed();
    break;
}
{% endprettify %}

However, Dart does support empty `case` clauses, allowing a form of
fall-through:

<!-- ch02/flow_switch_case.dart -->
{% prettify dart %}
var command = 'CLOSED';
switch (command) {
  case 'CLOSED': // Empty case falls through.
  case 'NOW_CLOSED':
    // Runs for both CLOSED and NOW_CLOSED.
    executeNowClosed();
    break;
}
{% endprettify %}

If you really want fall-through, you can use a `continue` statement and
a label:

<!-- ch02/flow_switch_case.dart -->
{% prettify dart %}
var command = 'CLOSED';
switch (command) {
  case 'CLOSED':
    executeClosed();
    continue nowClosed; // Continues executing at the nowClosed label.

nowClosed:
  case 'NOW_CLOSED':
    // Runs for both CLOSED and NOW_CLOSED.
    executeNowClosed();
    break;
}
{% endprettify %}

A `case` clause can have local variables, which are visible only inside
the scope of that clause.


### Assert {#assert}
{:.no_toc}

Use an `assert` statement to disrupt normal execution if a boolean
condition is false. You can find examples of assert statements
throughout this tour. Here are some more:

<!-- ch02/flow_assert.dart -->
{% prettify dart %}
assert(text != null);  // Make sure the variable has a non-null value.
assert(number < 100);  // Make sure the value is less than 100.
assert(urlString.startsWith('https')); // Make sure this is an HTTPS URL.
{% endprettify %}

<aside class="alert alert-info" markdown="1">
**Note:**
Assert statements work only in checked mode. They have no effect in
production mode.
</aside>

Inside the parentheses after `assert`, you can put any expression that
resolves to a boolean value or to a function. If the expression’s value
or function’s return value is true, the assertion succeeds and execution
continues. If it's false, the assertion fails and an exception (an
[AssertionError](http://api.dartlang.org/dart_core/AssertionError.html))
is thrown.


## Exceptions {#exceptions}

Votre code Dart peut lever et attraper des exceptions. Les exceptions sont des erreurs indiquant que quelque chose d'inattendu est survenu. Si l'exception n'est pas attrapée, l'isolate qui a levé l'exception est suspendu, et l'isolate et son programme sont interrompus.

Contrairement à Java, toutes les exceptions Dart sont des exceptions incontrôlées.
Les méthodes ne déclarents par quelles exceptions elles sont susceptible de lever, et il ne vous est pas demandé de toutes les attraper.

Dart founit les types
[Exception](http://api.dartlang.org/dart_core/Exception.html) et
[Error](http://api.dartlang.org/docs/continuous/dart_core/Error.html)
, ainsi que de nombreux sous types prédéfinis. Vous pouvez bien entendu définir vos propre exception. Cependant, les programmes Dart peuvent lever n'importe quel objet non nul comme une exception, pas seulement des objets Exception et Error.


### Lever une exception {#throw}
{:.no_toc}

Voici un exemple de comment lever une exception :

<!-- PENDING: NEED TEST FOR THIS -->
{% prettify dart %}
throw new FormatException('au moins une section attendue');
{% endprettify %}

Vous pouvez également lever n'importe quel type d'objet :

<!-- ch02/flow_exceptions.dart -->
{% prettify dart %}
throw 'A cours de lamas!';
{% endprettify %}

Lever une exception étant une expression, vous pouvez lever des exceptions dans les instructions =\>, ainsi que dans tout autre endroit permettant les expressions :

<!-- ch02/flow_exceptions.dart -->
{% prettify dart %}
distanceJusqua(Point autre) => throw new UnimplementedError();
{% endprettify %}


### Attraper une exception {#catch}
{:.no_toc}

Attraper, ou capturer une exception interromp la propagation de l'exception. Attraper une exception vous offre la possibilité de la traiter :

<!-- ch02/flow_exceptions.dart -->
{% prettify dart %}
try {
  eleverPlusDeLamas();
} on PlusDeLamaException {
  acheterPlusDeLamas();
}
{% endprettify %}

Pour traiter du code qui peut lever plus d'un type d'exception,
vous pouvez spécifier de multiples clauses catch. La première clause catch qui correspond au type de l'exception levée traite l'exception. Si la clause catch ne spécifie pas de type, cette clause peut traiter n'importe quel type d'objet levé :

<!-- ch02/flow_exceptions.dart -->
{% prettify dart %}
try {
  eleverPlusDeLamas();
} on PlusDeLamaException { // Une exception spécifique
  acheterPlusDeLamas();
} on Exception catch (e) {  // N'importe quoi d'autre qui est uen exception
  print('Exception inconnue : $e');
} catch (e) {               // Pas de type spécifié, traite tout
  print('Quelque chose de vraiment pas connu : $e');
}
{% endprettify %}

Comme le montre le code précédent, vous pouvez utiliser au choix `on` ou `catch` ou les deux.
Utilisez `on` quand vous avez besoin de spécifier le type de l'exception. Utilisez `catch` lorque traitement de l'exception a besoin de l'objet exception.


### Clause finally {#finally}
{:.no_toc}

Pour s'assurer qu'une partie de code s'exécute qu'une exception est été levée ou pas, utilisez la clause `finally`. Si aucune clause `catch` ne correspond à l'exception, cette dernière est propagée après que la clause `finally` n'ait été lancée :

<!-- ch02/flow_exceptions.dart -->
{% prettify dart %}
try {
  eleverPlusDeLamas();
} finally {
  nettoyerLesStalles();  // Toujours nettoyer, même si une exception est levée.
}
{% endprettify %}

La clause `finally` s'exécute après n'importe quelle clause `catch` :

<!-- ch02/flow_exceptions.dart -->
{% prettify dart %}
try {
  eleverPlusDeLamas();
} catch(e) {
  print('Erreur: $e');  // Traiter l'exception en premier.
} finally {
  nettoyerLesStalles();  // Ensuite nettoyer.
}
{% endprettify %}

Apprenez en davantage en lisant la section  [Exceptions](ch03.html#exceptions).


## Classes {#classes}

Dart is an object-oriented language with classes and mixin-based
inheritance. Every object is an instance of a class, and all classes
descend from [Object.](http://api.dartlang.org/dart_core/Object.html)
*Mixin-based inheritance* means that although every class (except for
Object) has exactly one superclass, a class body can be reused in
multiple class hierarchies.

To create an object, you can use the `new` keyword with a *constructor*
for a class. Constructor names can be either <code><em>ClassName</em></code> or
<code><em>ClassName</em>.<em>identifier</em></code>. For example:

<!-- ch02/object_classes.dart -->
{% prettify dart %}
var jsonData = JSON.decode('{"x":1, "y":2}');

var p1 = new Point(2, 2);              // Create a Point using Point().
var p2 = new Point.fromJson(jsonData); // Create a Point using Point.fromJson().
{% endprettify %}

Objects have *members* consisting of functions and data (*methods* and
*instance variables*, respectively). When you call a method, you *invoke*
it on an object: the method has access to that object’s functions and
data.

Use a dot (.) to refer to an instance variable or method:

<!-- ch02/object_classes.dart -->
{% prettify dart %}
var p = new Point(2, 2);

p.y = 3;          // Set the value of the instance variable y.
assert(p.y == 3); // Get the value of y.

num distance = p.distanceTo(new Point(4, 4)); // Invoke distanceTo() on p.
{% endprettify %}

Use the cascade operator (..) when you want to perform a series of
operations on the members of a single object:

<!-- ch02/object_classes.dart -->
{% prettify dart %}
querySelector('#button')
    ..text = 'Click to Confirm'                        // Get an object. Use its
    ..classes.add('important')                         // instance variables
    ..onClick.listen((e) => window.alert('Confirmed!')); // and methods.
{% endprettify %}

Some classes provide constant constructors. To create a compile-time
constant using a constant constructor, use `const` instead of `new`:

<!-- ch02/object_classes.dart -->
{% prettify dart %}
var p = const ImmutablePoint(2, 2);
{% endprettify %}

Constructing two identical compile-time constants results in a single,
canonical instance:

<!-- ch02/object_classes.dart -->
{% prettify dart %}
var a = const ImmutablePoint(1, 1);
var b = const ImmutablePoint(1, 1);

assert(identical(a, b)); // They are the same instance!
{% endprettify %}

The following sections discuss how to implement classes.


### Instance variables {#instance-variables}
{:.no_toc}

Here’s how you declare instance variables:

<!-- ch02/instance_variables.dart -->
{% prettify dart %}
class Point {
  num x;      // Declare an instance variable (x), initially null.
  num y;      // Declare y, initially null.
  num z = 0;  // Declare z, initially 0.
}
{% endprettify %}

All uninitialized instance variables have the value `null`.

All instance variables generate an implicit *getter* method. Non-final
instance variables also generate an implicit *setter* method. For details,
see [Getters and setters](#getters-and-setters).

<!-- ch02/instance_variables.dart -->
{% prettify dart %}
class Point {
  num x;
  num y;
}

main() {
  var point = new Point();
  point.x = 4;             // Use the setter method for x.
  assert(point.x == 4);    // Use the getter method for x.
  assert(point.y == null); // Values default to null.
}
{% endprettify %}

If you initialize an instance variable where it is declared (instead of
in a constructor or method), the value is set when the instance is
created, which is before the constructor and its initializer list
execute.


### Constructors {#constructors}
{:.no_toc}

Declare a constructor by creating a function with the same name as its
class (plus, optionally, an additional identifier as described in
[Named constructors](#named-constructors)).
The most common form of constructor, the generative constructor, creates
a new instance of a class:

<!-- ch02/constructor_long_way.dart -->
{% prettify dart %}
class Point {
  num x;
  num y;

  Point(num x, num y) {
    // There's a better way to do this, stay tuned.
    this.x = x;
    this.y = y;
  }
}
{% endprettify %}

The `this` keyword refers to the current instance.

<aside class="alert alert-info" markdown="1">
**Note:**
Use `this` only when there is a name conflict. Otherwise, Dart style
omits the `this`.
</aside>

The pattern of assigning a constructor argument to an instance variable
is so common, Dart has syntactic sugar to make it easy:

<!-- ch02/object_classes.dart -->
{% prettify dart %}
class Point {
  num x;
  num y;

  // Syntactic sugar for setting x and y before the constructor body runs.
  Point(this.x, this.y);
}
{% endprettify %}

#### Default constructors {#default-constructors}
{:.no_toc}

If you don’t declare a constructor, a default constructor is provided
for you. The default constructor has no arguments and invokes the
no-argument constructor in the superclass.

#### Constructors aren’t inherited {#constructors-arent-inherited}
{:.no_toc}

Subclasses don’t inherit constructors from their superclass. A subclass
that declares no constructors has only the default (no argument, no
name) constructor.

#### Named constructors {#named-constructors}
{:.no_toc}

Use a named constructor to implement multiple constructors for a class
or to provide extra clarity:

<!-- ch02/named_constructor.dart -->
{% prettify dart %}
class Point {
  num x;
  num y;

  Point(this.x, this.y);

  // Named constructor
  Point.fromJson(Map json) {
    x = json['x'];
    y = json['y'];
  }
}
{% endprettify %}

Remember that constructors are not inherited, which means that a
superclass’s named constructor is not inherited by a subclass. If you
want a subclass to be created with a named constructor defined in the
superclass, you must implement that constructor in the subclass.

#### Invoking a non-default superclass constructor {#invoking-a-non-default-superclass-constructor}
{:.no_toc}

By default, a constructor in a subclass calls the superclass’s unnamed,
no-argument constructor. If the superclass doesn’t have such a
constructor, then you must manually call one of the constructors in the
superclass. Specify the superclass constructor after a colon (`:`), just
before the constructor body (if any).

<!-- ch02/op_as.dart -->
{% prettify dart %}
class Person {
  Person.fromJson(Map data) {
    print('in Person');
  }
}

class Employee extends Person {
  // Person does not have a default constructor;
  // you must call super.fromJson(data).
  Employee.fromJson(Map data) : super.fromJson(data) {
    print('in Employee');
  }
}

main() {
  var emp = new Employee.fromJson({});

  // Prints:
  // in Person
  // in Employee
}
{% endprettify %}

Because the arguments to the superclass constructor are evaluated before
invoking the constructor, an argument can be an expression such as a
function call:

<!-- ch02/method_then_constructor.dart -->
{% prettify dart %}
class Employee extends Person {
  // ...
  Employee() : super.fromJson(findDefaultData());
}
{% endprettify %}

<aside class="alert alert-warning" markdown="1">
**Warning:**
Arguments to the superclass constructor do not have access to `this`.
For example, arguments can call static methods but not instance
methods.
</aside>


#### Initializer list {#initializer-list}
{:.no_toc}

Besides invoking a superclass constructor, you can also initialize
instance variables before the constructor body runs. Separate
initializers with commas.

<!-- ch02/initializer_list.dart -->
{% prettify dart %}
class Point {
  num x;
  num y;

  Point(this.x, this.y);

  // Initializer list sets instance variables before the constructor body runs.
  Point.fromJson(Map jsonMap)
      : x = jsonMap['x'],
        y = jsonMap['y'] {
    print('In Point.fromJson(): ($x, $y)');
  }
}
{% endprettify %}

<aside class="alert alert-warning" markdown="1">
**Warning:**
The right-hand side of an initializer does not have access to `this`.
</aside>


#### Redirecting constructors {#redirecting-constructors}
{:.no_toc}

Sometimes a constructor’s only purpose is to redirect to another
constructor in the same class. A redirecting constructor’s body is
empty, with the constructor call appearing after a colon (:).

<!-- ch02/along_x_axis.dart -->
{% prettify dart %}
class Point {
  num x;
  num y;

  Point(this.x, this.y);                // The main constructor for this class.
  Point.alongXAxis(num x) : this(x, 0); // Delegates to the main constructor.
}
{% endprettify %}

#### Constant constructors {#constant-constructors}
{:.no_toc}

If your class produces objects that never change, you can make these
objects compile-time constants. To do this, define a `const` constructor
and make sure that all instance variables are `final`.

<!-- ch02/immutable_point.dart -->
{% prettify dart %}
class ImmutablePoint {
  final num x;
  final num y;
  const ImmutablePoint(this.x, this.y);
  static final ImmutablePoint origin = const ImmutablePoint(0, 0);
}
{% endprettify %}

#### Factory constructors {#factory-constructors}
{:.no_toc}

Use the `factory` keyword when implementing a constructor that doesn’t
always create a new instance of its class. For example, a factory
constructor might return an instance from a cache, or it might return an
instance of a subtype.

The following example demonstrates a factory constructor returning
objects from a cache:

<!-- ch02/factory_constructor.dart -->
{% prettify dart %}
class Logger {
  final String name;
  bool mute = false;

  // _cache is library-private, thanks to the _ in front of its name.
  static final Map<String, Logger> _cache = <String, Logger>{};

  factory Logger(String name) {
    if (_cache.containsKey(name)) {
      return _cache[name];
    } else {
      final logger = new Logger._internal(name);
      _cache[name] = logger;
      return logger;
    }
  }

  Logger._internal(this.name);

  void log(String msg) {
    if (!mute) {
      print(msg);
    }
  }
}
{% endprettify %}

<aside class="alert alert-info" markdown="1">
**Note:**
Factory constructors have no access to `this`.
</aside>

To invoke a factory constructor, you use the `new` keyword:

<!-- ch02/factory_constructor.dart -->
{% prettify dart %}
var logger = new Logger('UI');
logger.log('Button clicked');
{% endprettify %}


### Methods {#methods}
{:.no_toc}

Methods are functions that provide behavior for an object.

#### Instance methods {#instance-methods}
{:.no_toc}

Instance methods on objects can access instance variables and `this`.
The `distanceTo()` method in the following sample is an example of an
instance method:

<!-- ch02/distance_to.dart -->
{% prettify dart %}
import 'dart:math';

class Point {
  num x;
  num y;
  Point(this.x, this.y);

  num distanceTo(Point other) {
    var dx = x - other.x;
    var dy = y - other.y;
    return sqrt(dx * dx + dy * dy);
  }
}
{% endprettify %}

#### Getters and setters {#getters-and-setters}
{:.no_toc}

Getters and setters are special methods that provide read and write
access to an object’s properties. Recall that each instance variable has
an implicit getter, plus a setter if appropriate. You can create
additional properties by implementing getters and setters, using the
`get` and `set` keywords:

<!-- ch02/rectangle.dart -->
{% prettify dart %}
class Rectangle {
  num left;
  num top;
  num width;
  num height;

  Rectangle(this.left, this.top, this.width, this.height);

  // Define two calculated properties: right and bottom.
  num get right             => left + width;
      set right(num value)  => left = value - width;
  num get bottom            => top + height;
      set bottom(num value) => top = value - height;
}

main() {
  var rect = new Rectangle(3, 4, 20, 15);
  assert(rect.left == 3);
  rect.right = 12;
  assert(rect.left == -8);
}
{% endprettify %}

With getters and setters, you can start with instance variables, later
wrapping them with methods, all without changing client code.

<aside class="alert alert-info" markdown="1">
**Note:**
Operators such as increment (++) work in the expected way, whether or
not a getter is explicitly defined. To avoid any unexpected side
effects, the operator calls the getter exactly once, saving its value
in a temporary variable.
</aside>

#### Abstract methods {#abstract-methods}
{:.no_toc}

Instance, getter, and setter methods can be abstract, defining an
interface but leaving its implementation up to other classes. To make a
method abstract, use a semicolon (;) instead of a method body:

<!-- ch02/doer.dart -->
{% prettify dart %}
abstract class Doer {
  // ...Define instance variables and methods...

  void doSomething(); // Define an abstract method.
}

class EffectiveDoer extends Doer {
  void doSomething() {
    // ...Provide an implementation, so the method is not abstract here...
  }
}
{% endprettify %}

Calling an abstract method results in a run-time error.

Also see [Abstract classes](#abstract-classes).

#### Overridable operators {#overridable-operators}
{:.no_toc}

You can override the operators shown in the following table.
For example, if you define a
Vector class, you might define a `+` method to add two vectors.

`<`  | `+`  | `|`  | `[]`
`>`  | `/`  | `^`  | `[]=`
`<=` | `~/` | `&`  | `~`
`>=` | `*`  | `<<` | `==`
`–`  | `%`  | `>>`
{:.table}

Here’s an example of a class that overrides the `+` and `-` operators:

<!-- ch02/vector.dart -->
{% prettify dart %}
class Vector {
  final int x;
  final int y;
  const Vector(this.x, this.y);

  Vector operator +(Vector v) { // Overrides + (a + b).
    return new Vector(x + v.x, y + v.y);
  }

  Vector operator -(Vector v) { // Overrides - (a - b).
    return new Vector(x - v.x, y - v.y);
  }
}

main() {
  final v = new Vector(2, 3);
  final w = new Vector(2, 2);

  assert(v.x == 2 && v.y == 3);             // v   == (2,3)
  assert((v + w).x == 4 && (v + w).y == 5); // v+w == (4,5)
  assert((v - w).x == 0 && (v - w).y == 1); // v-w == (0,1)
}
{% endprettify %}

If you override `==`, you should also override Object's `hashCode` getter.
For an example of overriding `==` and `hashCode`, see
[Implementing map keys](ch03.html#implementing-map-keys).

For more information on overriding, in general, see
[Extending a class](#extending-a-class).


### Abstract classes {#abstract-classes}
{:.no_toc}

Use the `abstract` modifier to define an *abstract class*—a class that
can’t be instantiated. Abstract classes are useful for defining
interfaces, often with some implementation. If you want your abstract
class to appear to be instantiable, define a [factory
constructor](#factory-constructors).

Abstract classes often have [abstract methods](#abstract-methods).
Here’s an example of declaring an abstract class that has an abstract
method:

<!-- ch02/abstract.dart -->
{% prettify dart %}
// This class is declared abstract and thus can't be instantiated.
abstract class AbstractContainer {
  // ...Define constructors, fields, methods...

  void updateChildren(); // Abstract method.
}
{% endprettify %}

The following class isn’t abstract, and thus can be instantiated even
though it defines an abstract method:

<!-- ch02/abstract.dart -->
{% prettify dart %}
class SpecializedContainer extends AbstractContainer {
  // ...Define more constructors, fields, methods...

  void updateChildren() {
    // ...Implement updateChildren()...
  }

  // Abstract method causes a warning but
  // doesn't prevent instantiation.
  void doSomething();
}
{% endprettify %}


### Implicit interfaces {#implicit-interfaces}
{:.no_toc}

Every class implicitly defines an interface containing all the instance
members of the class and of any interfaces it implements. If you want to
create a class A that supports class B’s API without inheriting B’s
implementation, class A should implement the B interface.

A class implements one or more interfaces by declaring them in an
`implements` clause and then providing the APIs required by the
interfaces. For example:

<!-- ch02/imposter.dart -->
{% prettify dart %}
// A person. The implicit interface contains greet().
class Person {
  final _name;          // In the interface, but visible only in this library,
  Person(this._name);   // Not in the interface, since this is a constructor.
  String greet(who) => 'Hello, $who. I am $_name.'; // In the interface.
}

// An implementation of the Person interface.
class Imposter implements Person {
  final _name = "";      // We have to define this, but we don't use it.
  String greet(who) => 'Hi $who. Do you know who I am?';
}

greetBob(Person person) => person.greet('bob');

main() {
  print(greetBob(new Person('kathy')));
  print(greetBob(new Imposter()));
}
{% endprettify %}

Here’s an example of specifying that a class implements multiple
interfaces:

<!-- ch02/point_interfaces.dart -->
{% prettify dart %}
class Point implements Comparable, Location {
  // ...
}
{% endprettify %}


### Extending a class {#extending-a-class}
{:.no_toc}

Use `extends` to create a subclass, and `super` to refer to the
superclass:

<!-- smart_tv.dart -->
{% prettify dart %}
class Television {
  void turnOn() {
    _illuminateDisplay();
    _activateIrSensor();
  }
  // ...
}

class SmartTelevision extends Television {
  void turnOn() {
    super.turnOn();
    _bootNetworkInterface();
    _initializeMemory();
    _upgradeApps();
  }
  // ...
}
{% endprettify %}

Subclasses can override instance methods, getters, and setters. Here’s
an example of overriding the Object class’s `noSuchMethod()` method,
which is called whenever code attempts to use a non-existent method or
instance variable:

<!-- ch02/no_such_method.dart -->
{% prettify dart %}
class A {
  // Unless you override noSuchMethod, using a non-existent member
  // results in a NoSuchMethodError.
  void noSuchMethod(Invocation mirror) {
    print('You tried to use a non-existent member: ${mirror.memberName}');
  }
}
{% endprettify %}

You can use the `@override` annotation to indicate that you are
intentionally overriding a member:

<!-- ch02/ch02_meta/bin/ch02_override.dart -->
{% prettify dart %}
class A {
  @override
  void noSuchMethod(Invocation mirror) {
    // ...
  }
}
{% endprettify %}

If you use `noSuchMethod()` to implement every possible getter, setter,
and method for a class, then you can use the `@proxy` annotation to
avoid warnings:

<!-- ch02/ch02_meta/bin/ch02_proxy.dart -->
{% prettify dart %}
@proxy
class A {
  void noSuchMethod(Invocation mirror) {
    // ...
  }
}
{% endprettify %}

For more information on annotations, see
[Metadata](#metadata).


### Adding features to a class: mixins {#adding-features-to-a-class-mixins}
{:.no_toc}

Mixins are a way of reusing a class's code in multiple class
hierarchies.

To use a mixin, use the `with` keyword followed by one or more mixin
names. The following example shows two classes that use mixins:

<!-- ch02/mixins.dart -->
{% prettify dart %}
class Musician extends Performer with Musical {
  // ...
}

class Maestro extends Person with Musical, Aggressive, Demented {
  Maestro(String maestroName) {
    name = maestroName;
    canConduct = true;
  }
}
{% endprettify %}

To implement a mixin, create a class that extends Object, declares no
constructors, and has no calls to `super`. For example:

<!-- ch02/mixins.dart -->
{% prettify dart %}
abstract class Musical {
  bool canPlayPiano = false;
  bool canCompose = false;
  bool canConduct = false;

  void entertainMe() {
    if (canPlayPiano) {
      print('Playing piano');
    } else if (canConduct) {
      print('Waving hands');
    } else {
      print('Humming to self');
    }
  }
}
{% endprettify %}

For more information, see the article [Mixins in
Dart.](/articles/mixins/)


### Class variables and methods {#class-variables-and-methods}
{:.no_toc}

Use the `static` keyword to implement class-wide variables and methods.

#### Static variables {#static-variables}
{:.no_toc}

Static variables (class variables) are useful for class-wide state and
constants:

<!-- ch02/color.dart -->
{% prettify dart %}
class Color {
  static const red = const Color('red'); // A constant static variable.
  final String name;                     // An instance variable.
  const Color(this.name);                // A constant constructor.
}

main() {
  assert(Color.red.name == 'red');
}
{% endprettify %}

Static variables aren’t initialized until they’re used.

<aside class="alert alert-info" markdown="1">
**Note:**
This chapter follows the [style guide
recommendation](/articles/style-guide/#prefer-using-lowercamelcase-for-constant-names)
of preferring `lowerCamelCase` for constant names.
</aside>

#### Static methods {#static-methods}
{:.no_toc}

Static methods (class methods) do not operate on an instance, and thus
do not have access to `this`. For example:

<!-- ch02/point.dart -->
{% prettify dart %}
import 'dart:math';

class Point {
  num x;
  num y;
  Point(this.x, this.y);

  static num distanceBetween(Point a, Point b) {
    var dx = a.x - b.x;
    var dy = a.y - b.y;
    return sqrt(dx * dx + dy * dy);
  }
}

main() {
  var a = new Point(2, 2);
  var b = new Point(4, 4);
  var distance = Point.distanceBetween(a, b);
  assert(distance < 2.9 && distance > 2.8);
}
{% endprettify %}

<aside class="alert alert-info" markdown="1">
**Note:**
Consider using top-level functions, instead of static methods, for
common or widely used utilities and functionality.
</aside>

You can use static methods as compile-time constants. For example, you
can pass a static method as a parameter to a constant constructor.


## Generics {#generics}

If you look at the API documentation for the basic array type,
[List,](http://api.dartlang.org/dart_core/List.html) you’ll see that the
type is actually `List<E>`. The \<...\> notation marks List as a
*generic* (or *parameterized*) type—a type that has formal type
parameters. By convention, type variables have single-letter names, such
as E, T, S, K, and V.


### Why use generics? {#why-use-generics}
{:.no_toc}

Because types are optional in Dart, you never *have* to use generics.
You might *want* to, though, for the same reason you might want to use
other types in your code: types (generic or not) let you document and
annotate your code, making your intent clearer.

For example, if you intend for a list to contain only strings, you can
declare it as `List<String>` (read that as “list of string”). That way
you, your fellow programmers, and your tools (such as Dart Editor and
the Dart VM in checked mode) can detect that assigning a non-string to
the list is probably a mistake. Here’s an example:

<!-- ch02/generics.dart -->
{% prettify dart %}
var names = new List<String>();
names.addAll(['Seth', 'Kathy', 'Lars']);
// ...
names.add(42); // Fails in checked mode (succeeds in production mode).
{% endprettify %}

Another reason for using generics is to reduce code duplication.
Generics let you share a single interface and implementation between
many types, while still taking advantage of checked mode and static
analysis early warnings. For example, say you create an interface for
caching an object:

<!-- ch02/generics.dart -->
{% prettify dart %}
abstract class ObjectCache {
  Object getByKey(String key);
  setByKey(String key, Object value);
}
{% endprettify %}

You discover that you want a string-specific version of this interface,
so you create another interface:

<!-- ch02/generics.dart -->
{% prettify dart %}
abstract class StringCache {
  String getByKey(String key);
  setByKey(String key, String value);
}
{% endprettify %}

Later, you decide you want a number-specific version of this
interface... You get the idea.

Generic types can save you the trouble of creating all these interfaces.
Instead, you can create a single interface that takes a type parameter:

<!-- ch02/generics.dart -->
{% prettify dart %}
abstract class Cache<T> {
  T getByKey(String key);
  setByKey(String key, T value);
}
{% endprettify %}

In this code, T is the stand-in type. It’s a placeholder that you can
think of as a type that a developer will define later.


### Using collection literals {#using-collection-literals}
{:.no_toc}

List and map literals can be parameterized. Parameterized literals are
just like the literals you’ve already seen, except that you add
<code>&lt;<em>type</em>></code> (for lists) or
<code>&lt;<em>keyType</em>, <em>valueType</em>></code> (for maps)
before the opening bracket. You might use
parameterized literals when you want type warnings in checked mode. Here
is example of using typed literals:

<!-- ch02/generics.dart -->
{% prettify dart %}
var names = <String>['Seth', 'Kathy', 'Lars'];
var pages = <String, String>{
  'index.html': 'Homepage',
  'robots.txt': 'Hints for web robots',
  'humans.txt': 'We are people, not machines'
};
{% endprettify %}


### Using parameterized types with constructors {#using-parameterized-types-with-constructors}
{:.no_toc}

To specify one or more types when using a constructor, put the types in
angle brackets (`<...>`) just after the class name. For example:

<!-- ch02/generics.dart -->
{% prettify dart %}
var names = new List<String>();
names.addAll(['Seth', 'Kathy', 'Lars']);
var nameSet = new Set<String>.from(names);
{% endprettify %}

The following code creates a map that has integer keys and values of
type View:

<!-- ch02/generics.dart -->
{% prettify dart %}
var views = new Map<int, View>();
{% endprettify %}


### Generic collections and the types they contain {#generic-collections-and-the-types-they-contain}
{:.no_toc}

Dart generic types are *reified*, which means that they carry their type
information around at runtime. For example, you can test the type of a
collection, even in production mode:

<!-- ch02/generics.dart -->
{% prettify dart %}
var names = new List<String>();
names.addAll(['Seth', 'Kathy', 'Lars']);
print(names is List<String>); // true
{% endprettify %}

However, the `is` expression checks the type of the *collection*
only—not of the objects inside it. In production mode, a `List<String>`
might have some non-string items in it. The solution is to either check
each item’s type or wrap item-manipulation code in an exception handler
(see [Exceptions](#exceptions)).

<aside class="alert alert-info" markdown="1">
**Note:**
In contrast, generics in Java use *erasure*, which means that generic
type parameters are removed at runtime. In Java, you can test whether
an object is a List, but you can’t test whether it’s a `List<String>`.
</aside>

For more information about generics, see [Optional Types in
Dart.](/articles/optional-types/)


## Libraries and visibility {#libraries-and-visibility}

The `import`, `part`, and `library` directives can help you create a
modular and shareable code base. Libraries not only provide APIs, but
are a unit of privacy: identifiers that start with an underscore (\_)
are visible only inside the library. *Every Dart app is a library*, even
if it doesn’t use a library directive.

Libraries can be distributed using packages. See
[Pub Package and Asset Manager](/tools/pub/)
for information about
pub, a package manager included in the SDK.


### Using libraries {#using-libraries}
{:.no_toc}

Use `import` to specify how a namespace from one library is used in the
scope of another library.

For example, Dart web apps generally use the
[dart:html](http://api.dartlang.org/html.html) library, which they can
import like this:

<!-- ch02/libraries/using_libraries.dart -->
{% prettify dart %}
import 'dart:html';
{% endprettify %}

The only required argument to `import` is a URI specifying the
library.
For built-in libraries, the URI has the special `dart:` scheme.
For other libraries, you can use a file system path or the `package:`
scheme. The `package:` scheme specifies libraries provided by a package
manager such as the pub tool. For example:

<!-- ch02/libraries/using_schemes.dart, mylib, utils -->
{% prettify dart %}
import 'dart:io';
import 'package:mylib/mylib.dart';
import 'package:utils/utils.dart';
{% endprettify %}

<aside class="alert alert-info" markdown="1">
**Note:**
*URI* stands for uniform resource identifier.
*URLs* (uniform resource locators) are a common kind of URI.
</aside>


#### Specifying a library prefix {#specifying-a-library-prefix}
{:.no_toc}

If you import two libraries that have conflicting identifiers, then you
can specify a prefix for one or both libraries. For example, if library1
and library2 both have an Element class, then you might have code like
this:

<!-- ch02/libraries/library_prefix.dart, lib1, lib2 -->
{% prettify dart %}
import 'package:lib1/lib1.dart';
import 'package:lib2/lib2.dart' as lib2;
// ...
var element1 = new Element();      // Uses Element from lib1.
var element2 = new lib2.Element(); // Uses Element from lib2.
{% endprettify %}

#### Importing only part of a library {#importing-only-part-of-a-library}
{:.no_toc}

If you want to use only part of a library, you can selectively import
the library. For example:

<!-- ch02/libraries/library_partil.dart, lib1, lib2 -->
{% prettify dart %}
import 'package:lib1/lib1.dart' show foo; // Import only foo.
import 'package:lib2/lib2.dart' hide foo; // Import all names EXCEPT foo.
{% endprettify %}


### Implementing libraries {#implementing-libraries}
{:.no_toc}

Use `library` to name a library, and `part` to specify additional files
in the library.

<aside class="alert alert-info" markdown="1">
**Note:**
You don’t have to use `library` in an app (a file that has a top-level
main() function), but doing so lets you implement the app in multiple
files.
</aside>

#### Declaring a library {#declaring-a-library}
{:.no_toc}

Use <code>library <em>identifier</em></code>
to specify the name of the current library:

<!-- ch02/ballgame.dart -->
{% prettify dart %}
library ballgame;   // Declare that this is a library named ballgame.

import 'dart:html'; // This app uses the HTML library.
// ...Code goes here...
{% endprettify %}

#### Associating a file with a library {#associating-a-file-with-a-library}
{:.no_toc}

To add an implementation file, put
<code>part <em>fileUri</em></code>
in the file that has the `library` statement, where *fileUri*
is the path to the implementation file. Then in the implementation file, put
<code>part of <em>identifier</em></code>,
where *identifier* is the name of the library. The following
example uses `part` and `part of` to implement a library in three files.

The first file, `ballgame.dart`, declares the ballgame library, imports
other libraries it needs, and specifies that `ball.dart` and `util.dart`
are parts of this library:

<!-- ch02/ballgame.dart -->
{% prettify dart %}
library ballgame;

import 'dart:html';
// ...Other imports go here...

part 'ball.dart';
part 'util.dart';

// ...Code might go here...
{% endprettify %}

The second file, `ball.dart`, implements part of the ballgame library:

<!-- ch02/ball.dart -->
{% prettify dart %}
part of ballgame;

// ...Code goes here...
{% endprettify %}

The third file, `util.dart`, implements the rest of the ballgame
library:

<!-- ch02/util.dart -->
{% prettify dart %}
part of ballgame;

// ...Code goes here...
{% endprettify %}

#### Re-exporting libraries {#re-exporting-libraries}
{:.no_toc}

You can combine or repackage libraries by re-exporting part or all of
them. For example, you might have a huge library that you implement as a
set of smaller libraries. Or you might create a library that provides a
subset of methods from another library.

<!-- ch02/french.dart, togo.dart, french_togo.dart -->
{% prettify dart %}
// In french.dart:
library french;

hello() => print('Bonjour!');
goodbye() => print('Au Revoir!');

// In togo.dart:
library togo;
import 'french.dart';
export 'french.dart' show hello;

// In another .dart file:
import 'togo.dart';

void main() {
  hello();   //print bonjour
  goodbye(); //FAIL
}
{% endprettify %}


## Isolates {#isolates}

Modern web browsers, even on mobile platforms, run on multi-core CPUs.
To take advantage of all those cores, developers traditionally use
shared-memory threads running concurrently. However, shared-state
concurrency is error prone and can lead to complicated code.

Instead of threads, all Dart code runs inside of *isolates*. Each
isolate has its own memory heap, ensuring that no isolate’s state is
accessible from any other isolate.


## Typedefs {#typedefs}

In Dart, functions are objects, just like strings and numbers are
objects. A *typedef*, or *function-type alias*, gives a function type a
name that you can use when declaring fields and return types. A typedef
retains type information when a function type is assigned to a variable.

Consider the following code, which does not use a typedef:

<!-- ch02/sorted_collection.dart -->
{% prettify dart %}
class SortedCollection {
  Function compare;

  SortedCollection(int f(Object a, Object b)) {
    compare = f;
  }
}

int sort(Object a, Object b) => ... ; // Initial, broken implementation.

main() {
  SortedCollection collection = new SortedCollection(sort);

  // All we know is that compare is a function, but what type of function?
  assert(collection.compare is Function);
}
{% endprettify %}

Type information is lost when assigning `f` to `compare`. The type of
`f` is `(Object, ``Object)` → `int` (where → means returns), yet the
type of `compare` is Function. If we change the code to use explicit
names and retain type information, both developers and tools can use
that information.

<!-- ch02/sorted_collection.dart -->
{% prettify dart %}
typedef int Compare(Object a, Object b);

class SortedCollection {
  Compare compare;

  SortedCollection(this.compare);
}

int sort(Object a, Object b) => ... ; // Initial, broken implementation.

main() {
  SortedCollection collection = new SortedCollection(sort);
  assert(collection.compare is Function);
  assert(collection.compare is Compare);
}
{% endprettify %}

<aside class="alert alert-info" markdown="1">
**Note:**
Currently, typedefs are restricted to function types. We expect this
to change.
</aside>

Because typedefs are simply aliases, they offer a way to check the type
of any function. For example:

<!-- ch02/sorted_collection.dart -->
{% prettify dart %}
typedef int Compare(int a, int b);

int sort(int a, int b) => a - b;

main() {
  assert(sort is Compare); // True!
}
{% endprettify %}


## Metadata {#metadata}

Utilisez les metadata pour donner de l'information complémentaire à votre code.
Une annotation metadata commence par le caratère `@`, suivi par soit une référence
à une constante de compilation (telle que `deprecated`) soit un appel à un constructeur constant.

Trois annotations sont disponibles pour tout code Dart : `@deprecated`,
`@override`, et `@proxy`. Pour des exemples d'utilisation de `@override` et
`@proxy`, voir [Etendre une classe](#extending-a-class).
Voici un exemple d'utilisation de l'annotation `@deprecated` :

<!-- ch02/ch02_meta/bin/ch02_meta.dart -->
{% prettify dart %}
class Television {
  /// _Deprecated: Utiliser [allumer] à la place._
  @deprecated      // Metadata; fait en sorte que Dart Editor alerte sur l'utilisation de activate().
  void activer() {
    allumer();
  }

  /// Allume la télé.
  void allumer() {
    print('On!');
  }
}
{% endprettify %}

Vous pouvez définir vos propres annotations metadata. Voici un exemple de
définition de l'annotation @todo qui prend deux arguments :

<!-- ch02/ch02_meta_create/todo.dart -->
{% prettify dart %}
library todo;

class aFaire {
  final String qui;
  final String quoi;

  const aFaire(this.qui, this.quoi);
}
{% endprettify %}

Et voici un exemple d'utilisation de cette annotation @aFaire :

<!-- ch02/ch02_meta_create/metadata_user.dart -->
{% prettify dart %}
import 'todo.dart';

@todo('seth', 'Fait faire quelque chose à cette fonction')
void faitQuelqueChose() {
  print('Fait quelque chose');
}
{% endprettify %}

Les metadatas peuvent apparaitre avant une déclaration de librairie, classe, typedef, paramètre de type,
constructeur, factory, fonction, champ, paramètre, ou variable et avant un import ou export de directive.
Vous pouvez récupérer les metadatas durant l'execution en utilisant la réflexion.


## Commentaires {#comments}

Dart supporte les commentaires sur une ou plusieurs lignes et
les commentaires de documentation.


### Commentaires d'une ligne {#single-line-comments}
{:.no_toc}

Un commentaire d'une ligne commence par `//`. Tout entre `//` et la
fin de la ligne est ignoré par le compilateur Dart.

<!-- ch02/single_line_comments.dart -->
{% prettify dart %}
main() {
  // TODO: refactorer en AbstractLlamaGreetingFactory?
  print('Bienvenue à ma ferme de lamas !');
}
{% endprettify %}


### Commentaires de plusieurs lignes {#multi-line-comments}
{:.no_toc}

Un commentaire de plusieurs lignes commence par `/*` et se termine par `*/`.
Tout entre `/*` et `*/` est ignoré par le compilateur Dart (à moins que le commentaire ne soit un commentaire de documentation; voir la section suivante). Les commentaires de plusieurs lignes peuvent s'imbriquer.

<!-- ch02/multi_line_comments.dart -->
{% prettify dart %}
main() {
  /*
   * C'est beaucoup de travail. Envisager l'élevage de poulets.

  Llama larry = new Llama();
  larry.nourrir();
  larry.preparer();
  larry.nettoyer();
   */
}
{% endprettify %}


### Commentaires de documentation {#documentation-comments}
{:.no_toc}

Les commentaires de documentation sont des commentaires d'une ou plusieurs lignes qui commencent
avec `///` ou `/**`. Utiliser `///` sur plusieurs lignes consécutives a le même effet qu'un commentaire de documentation sur plusieurs lignes.

Dans un commentaire de documentation, le compilateur Dart ignore tout text sauf si celui-ci est entouré par des crochets.
En utilisant des crochets, vous pouvez référer à une classe, une méthode, un champ, une variable globale, une fonction et des paramètres. Les noms entre crochets sont résolues dans le champ lexical de l'élément documenté.

Voici un exemple de commentaires de documentation qui référencient d'autres classes et arguments:

<!-- ch02/doc_comments.dart -->
{% prettify dart %}
/// Une camélidé domestiqué d'amérique du sud (Lama glama).
///
/// Les cultures Andines utilisent les lamas comme nouriture et animaux de portage
/// depuis les temps préhistoriques.
class Lama {
  String nom;

  /// Nourris ton lama [Nourriture].
  ///
  /// Un lama typique mange une botte de foin par semaine.
  void nourrir(Nourriture nourriture) {
    // ...
  }

  /// Fait travailler ton lama sur une [activité] pour
  /// [limiteDeTemps] minutes.
  void travaille(Activité activité, int limiteDeTemps) {
    // ...
  }
}
{% endprettify %}

Dans la documentation générée, `[Nourriture]` devient un lien pour la documentation d'API pour la classe Nourriture.

Pour parser du code Dart et générer de la documentation HTML, vous pouvez utiliser the SDK [outil de génération de documentation.](/tools/docgen/) Pour un exemple de documentation générée, voir [Documentation API Dart.](http://api.dartlang.org)
Pour des conseils sur la struturation des commentaire, voir [Guide pour les commentaires de documentation Dart.](/articles/doc-comment-guidelines/)


## Summary {#summary}

This chapter summarized the commonly used features in the Dart language.
More features are being implemented, but we expect that they won’t break
existing code. For more information, see the [Dart Language
Specification](/docs/spec/) and
[articles](/articles/) such as [Idiomatic
Dart.](/articles/idiomatic-dart/)


<hr>
{% include book-nav.html %}
